Make Matrix Beautiful
Solution:
class Solution:
    def balanceSums(self, mat):
        n = len(mat)
        
        # Calculate row sums and column sums
        row_sum = [sum(mat[i]) for i in range(n)]
        col_sum = [sum(mat[i][j] for i in range(n)) for j in range(n)]
        
        # Target sum for each row/col = max of all sums
        target = max(max(row_sum), max(col_sum))
        
        ops = 0
        i = j = 0
        
        # Greedy adjustment
        while i < n and j < n:
            diff = min(target - row_sum[i], target - col_sum[j])
            mat[i][j] += diff
            row_sum[i] += diff
            col_sum[j] += diff
            ops += diff
            
            # Move to next row/col if balanced
            if row_sum[i] == target:
                i += 1
            if col_sum[j] == target:
                j += 1
        
        return ops
