Nine Divisors
Solution in  c++   :
class Solution {
  public:
    int countNumbers(int n) {
        // Generate primes up to sqrt(n) using Sieve of Eratosthenes
        int maxP = sqrt(n) + 1;
        vector<bool> isPrime(maxP, true);
        vector<int> primes;

        isPrime[0] = isPrime[1] = false;
        for (int i = 2; i < maxP; ++i) {
            if (isPrime[i]) {
                primes.push_back(i);
                for (int j = i * 2; j < maxP; j += i)
                    isPrime[j] = false;
            }
        }

        int count = 0;

        // Case 1: p^8
        for (int p : primes) {
            long long power = 1;
            for (int i = 0; i < 8; ++i)
                power *= p;
            if (power <= n)
                count++;
            else
                break;
        }

        // Case 2: p^2 * q^2, p != q
        int sz = primes.size();
        for (int i = 0; i < sz; ++i) {
            long long p2 = 1LL * primes[i] * primes[i];
            if (p2 > n) break;
            for (int j = i + 1; j < sz; ++j) {
                long long q2 = 1LL * primes[j] * primes[j];
                if (p2 * q2 <= n)
                    count++;
                else
                    break;
            }
        }

        return count;
    }
};
